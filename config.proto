syntax = "proto2";

import "google/protobuf/duration.proto";

import "tsql.proto";
import "tsz.proto";

package tsdb2;

// Defines one or more tsz metrics, forcing incompatible changes.
//
// TODO: document the overriding behavior.
message ForceDefineMetricsRequest {
  repeated tsz.MetricDescriptor metric_descriptor = 1;
}

message ForceDefineMetricsResponse {}

// Describes a target schema.
message TargetSchema {
  optional string name = 1;

  enum FieldType {
    TARGET_FIELD_TYPE_STRING = 0;
    TARGET_FIELD_TYPE_BOOL = 1;
    TARGET_FIELD_TYPE_INT64 = 2;
  }

  message FieldDefinition {
    optional string name = 1;
    optional uint32 tag_number = 2;
    optional FieldType type = 3;
  }

  // Definitions of the target fields.
  //
  // NOTE: field names and tag numbers must be unique within the schema.
  repeated FieldDefinition field = 2;
}

// Describes a precomputed query.
message StandingQuery {
  optional string name = 1;
  optional tsql.Node expression = 2;
}

message RetentionPolicy {
  message MetricSpec {
    repeated string inclusion_patterns = 1;
    repeated string exclusion_patterns = 2;
  }

  message PrecomputationSpec {
    optional string precomputation_name = 1;
    map<string, SourceSpec> precomputation_parameters = 2;
  }

  message SourceSpec {
    oneof spec {
      MetricSpec metric_spec = 1;
      PrecomputationSpec precomputation_spec = 2;
    }
  }

  optional SourceSpec source_spec = 1;
  optional string target_schema = 2;
  optional google.protobuf.Duration sampling_period = 3;
  optional uint32 traffic_class = 4;
  optional uint32 replication_level = 5;
}

message ModuleDescriptor {
  optional string group_name = 1;
  optional string module_name = 2;

  // Target schemas defined by this module.
  repeated TargetSchema target_schema = 3;

  // Standing queries defined by this module. Standing queries are TSQL expressions that are used in
  // precomputations. They may have abstract source stream table parameters, which are bound in the
  // retention policies for the precomputations using these expressions.
  repeated StandingQuery standing_query = 4;

  // Retention policies defined by this module, both for raw metrics and precomputations.
  repeated RetentionPolicy retention_policy = 5;

  // TODO: consoles
  // TODO: alerts
}

message GetModuleRequest {
  optional string group_name = 1;
  optional string module_name = 2;
}

message GetModuleResponse {
  optional ModuleDescriptor module_descriptor = 1;
}

message SetModuleRequest {
  optional ModuleDescriptor module_descriptor = 1;
}

message SetModuleResponse {}

message DeleteModuleRequest {
  optional string group_name = 1;
  optional string module_name = 2;
}

message DeleteModuleResponse {}

service ConfigService {
  rpc DefineMetrics(tsz.DefineMetricsRequest) returns (tsz.DefineMetricsResponse);

  rpc ForceDefineMetrics(ForceDefineMetricsRequest) returns (ForceDefineMetricsResponse);

  rpc GetModule(GetModuleRequest) returns (GetModuleResponse);

  rpc SetModule(SetModuleRequest) returns (SetModuleResponse);

  rpc DeleteModule(DeleteModuleRequest) returns (DeleteModuleResponse);
}
